/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * standard public schema
 *
 * The version of the OpenAPI document: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Breweries,
    BreweriesFromJSON,
    BreweriesToJSON,
} from '../models';

export interface BreweriesDeleteRequest {
    serial?: number;
    name?: string;
    city?: string;
    state?: string;
    id?: number;
    prefer?: BreweriesDeletePreferEnum;
}

export interface BreweriesGetRequest {
    serial?: number;
    name?: string;
    city?: string;
    state?: string;
    id?: number;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: BreweriesGetPreferEnum;
}

export interface BreweriesPatchRequest {
    serial?: number;
    name?: string;
    city?: string;
    state?: string;
    id?: number;
    prefer?: BreweriesPatchPreferEnum;
    breweries?: Breweries;
}

export interface BreweriesPostRequest {
    select?: string;
    prefer?: BreweriesPostPreferEnum;
    breweries?: Breweries;
}

/**
 * 
 */
export class BreweriesApi extends runtime.BaseAPI {

    /**
     */
    async breweriesDeleteRaw(requestParameters: BreweriesDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.serial !== undefined) {
            queryParameters['serial'] = requestParameters.serial;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.city !== undefined) {
            queryParameters['city'] = requestParameters.city;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/breweries`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async breweriesDelete(requestParameters: BreweriesDeleteRequest): Promise<void> {
        await this.breweriesDeleteRaw(requestParameters);
    }

    /**
     */
    async breweriesGetRaw(requestParameters: BreweriesGetRequest): Promise<runtime.ApiResponse<Array<Breweries>>> {
        const queryParameters: any = {};

        if (requestParameters.serial !== undefined) {
            queryParameters['serial'] = requestParameters.serial;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.city !== undefined) {
            queryParameters['city'] = requestParameters.city;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.range !== undefined && requestParameters.range !== null) {
            headerParameters['Range'] = String(requestParameters.range);
        }

        if (requestParameters.rangeUnit !== undefined && requestParameters.rangeUnit !== null) {
            headerParameters['Range-Unit'] = String(requestParameters.rangeUnit);
        }

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/breweries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BreweriesFromJSON));
    }

    /**
     */
    async breweriesGet(requestParameters: BreweriesGetRequest): Promise<Array<Breweries>> {
        const response = await this.breweriesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async breweriesPatchRaw(requestParameters: BreweriesPatchRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.serial !== undefined) {
            queryParameters['serial'] = requestParameters.serial;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.city !== undefined) {
            queryParameters['city'] = requestParameters.city;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/breweries`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BreweriesToJSON(requestParameters.breweries),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async breweriesPatch(requestParameters: BreweriesPatchRequest): Promise<void> {
        await this.breweriesPatchRaw(requestParameters);
    }

    /**
     */
    async breweriesPostRaw(requestParameters: BreweriesPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/breweries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BreweriesToJSON(requestParameters.breweries),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async breweriesPost(requestParameters: BreweriesPostRequest): Promise<void> {
        await this.breweriesPostRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum BreweriesDeletePreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}
/**
    * @export
    * @enum {string}
    */
export enum BreweriesGetPreferEnum {
    Countnone = 'count=none'
}
/**
    * @export
    * @enum {string}
    */
export enum BreweriesPatchPreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}
/**
    * @export
    * @enum {string}
    */
export enum BreweriesPostPreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}
