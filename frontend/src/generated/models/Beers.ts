/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * standard public schema
 *
 * The version of the OpenAPI document: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Beers
 */
export interface Beers {
    /**
     * 
     * @type {number}
     * @memberof Beers
     */
    serial: number;
    /**
     * 
     * @type {number}
     * @memberof Beers
     */
    abv?: number;
    /**
     * 
     * @type {number}
     * @memberof Beers
     */
    ibu?: number;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * @type {number}
     * @memberof Beers
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Beers
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Beers
     */
    style?: string;
    /**
     * Note:
     * This is a Foreign Key to `breweries.id`.<fk table='breweries' column='id'/>
     * @type {number}
     * @memberof Beers
     */
    breweryId?: number;
    /**
     * 
     * @type {number}
     * @memberof Beers
     */
    ounces?: number;
}

export function BeersFromJSON(json: any): Beers {
    return BeersFromJSONTyped(json, false);
}

export function BeersFromJSONTyped(json: any, ignoreDiscriminator: boolean): Beers {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'serial': json['serial'],
        'abv': !exists(json, 'abv') ? undefined : json['abv'],
        'ibu': !exists(json, 'ibu') ? undefined : json['ibu'],
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'style': !exists(json, 'style') ? undefined : json['style'],
        'breweryId': !exists(json, 'brewery_id') ? undefined : json['brewery_id'],
        'ounces': !exists(json, 'ounces') ? undefined : json['ounces'],
    };
}

export function BeersToJSON(value?: Beers | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'serial': value.serial,
        'abv': value.abv,
        'ibu': value.ibu,
        'id': value.id,
        'name': value.name,
        'style': value.style,
        'brewery_id': value.breweryId,
        'ounces': value.ounces,
    };
}


