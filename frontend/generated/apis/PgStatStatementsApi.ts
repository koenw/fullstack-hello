/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * standard public schema
 *
 * The version of the OpenAPI document: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PgStatStatements,
    PgStatStatementsFromJSON,
    PgStatStatementsToJSON,
} from '../models';

export interface PgStatStatementsGetRequest {
    userid?: string;
    dbid?: string;
    queryid?: string;
    query?: string;
    calls?: string;
    totalTime?: string;
    minTime?: string;
    maxTime?: string;
    meanTime?: string;
    stddevTime?: string;
    rows?: string;
    sharedBlksHit?: string;
    sharedBlksRead?: string;
    sharedBlksDirtied?: string;
    sharedBlksWritten?: string;
    localBlksHit?: string;
    localBlksRead?: string;
    localBlksDirtied?: string;
    localBlksWritten?: string;
    tempBlksRead?: string;
    tempBlksWritten?: string;
    blkReadTime?: string;
    blkWriteTime?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: PgStatStatementsGetPreferEnum;
}

/**
 * 
 */
export class PgStatStatementsApi extends runtime.BaseAPI {

    /**
     */
    async pgStatStatementsGetRaw(requestParameters: PgStatStatementsGetRequest): Promise<runtime.ApiResponse<Array<PgStatStatements>>> {
        const queryParameters: any = {};

        if (requestParameters.userid !== undefined) {
            queryParameters['userid'] = requestParameters.userid;
        }

        if (requestParameters.dbid !== undefined) {
            queryParameters['dbid'] = requestParameters.dbid;
        }

        if (requestParameters.queryid !== undefined) {
            queryParameters['queryid'] = requestParameters.queryid;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.calls !== undefined) {
            queryParameters['calls'] = requestParameters.calls;
        }

        if (requestParameters.totalTime !== undefined) {
            queryParameters['total_time'] = requestParameters.totalTime;
        }

        if (requestParameters.minTime !== undefined) {
            queryParameters['min_time'] = requestParameters.minTime;
        }

        if (requestParameters.maxTime !== undefined) {
            queryParameters['max_time'] = requestParameters.maxTime;
        }

        if (requestParameters.meanTime !== undefined) {
            queryParameters['mean_time'] = requestParameters.meanTime;
        }

        if (requestParameters.stddevTime !== undefined) {
            queryParameters['stddev_time'] = requestParameters.stddevTime;
        }

        if (requestParameters.rows !== undefined) {
            queryParameters['rows'] = requestParameters.rows;
        }

        if (requestParameters.sharedBlksHit !== undefined) {
            queryParameters['shared_blks_hit'] = requestParameters.sharedBlksHit;
        }

        if (requestParameters.sharedBlksRead !== undefined) {
            queryParameters['shared_blks_read'] = requestParameters.sharedBlksRead;
        }

        if (requestParameters.sharedBlksDirtied !== undefined) {
            queryParameters['shared_blks_dirtied'] = requestParameters.sharedBlksDirtied;
        }

        if (requestParameters.sharedBlksWritten !== undefined) {
            queryParameters['shared_blks_written'] = requestParameters.sharedBlksWritten;
        }

        if (requestParameters.localBlksHit !== undefined) {
            queryParameters['local_blks_hit'] = requestParameters.localBlksHit;
        }

        if (requestParameters.localBlksRead !== undefined) {
            queryParameters['local_blks_read'] = requestParameters.localBlksRead;
        }

        if (requestParameters.localBlksDirtied !== undefined) {
            queryParameters['local_blks_dirtied'] = requestParameters.localBlksDirtied;
        }

        if (requestParameters.localBlksWritten !== undefined) {
            queryParameters['local_blks_written'] = requestParameters.localBlksWritten;
        }

        if (requestParameters.tempBlksRead !== undefined) {
            queryParameters['temp_blks_read'] = requestParameters.tempBlksRead;
        }

        if (requestParameters.tempBlksWritten !== undefined) {
            queryParameters['temp_blks_written'] = requestParameters.tempBlksWritten;
        }

        if (requestParameters.blkReadTime !== undefined) {
            queryParameters['blk_read_time'] = requestParameters.blkReadTime;
        }

        if (requestParameters.blkWriteTime !== undefined) {
            queryParameters['blk_write_time'] = requestParameters.blkWriteTime;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.range !== undefined && requestParameters.range !== null) {
            headerParameters['Range'] = String(requestParameters.range);
        }

        if (requestParameters.rangeUnit !== undefined && requestParameters.rangeUnit !== null) {
            headerParameters['Range-Unit'] = String(requestParameters.rangeUnit);
        }

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/pg_stat_statements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PgStatStatementsFromJSON));
    }

    /**
     */
    async pgStatStatementsGet(requestParameters: PgStatStatementsGetRequest): Promise<Array<PgStatStatements>> {
        const response = await this.pgStatStatementsGetRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum PgStatStatementsGetPreferEnum {
    Countnone = 'count=none'
}
