/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * standard public schema
 *
 * The version of the OpenAPI document: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PgStatKcacheDetail,
    PgStatKcacheDetailFromJSON,
    PgStatKcacheDetailToJSON,
} from '../models';

export interface PgStatKcacheDetailGetRequest {
    query?: string;
    datname?: string;
    rolname?: string;
    userTime?: string;
    systemTime?: string;
    minflts?: string;
    majflts?: string;
    nswaps?: string;
    reads?: string;
    readsBlks?: string;
    writes?: string;
    writesBlks?: string;
    msgsnds?: string;
    msgrcvs?: string;
    nsignals?: string;
    nvcsws?: string;
    nivcsws?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: PgStatKcacheDetailGetPreferEnum;
}

/**
 * 
 */
export class PgStatKcacheDetailApi extends runtime.BaseAPI {

    /**
     */
    async pgStatKcacheDetailGetRaw(requestParameters: PgStatKcacheDetailGetRequest): Promise<runtime.ApiResponse<Array<PgStatKcacheDetail>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.datname !== undefined) {
            queryParameters['datname'] = requestParameters.datname;
        }

        if (requestParameters.rolname !== undefined) {
            queryParameters['rolname'] = requestParameters.rolname;
        }

        if (requestParameters.userTime !== undefined) {
            queryParameters['user_time'] = requestParameters.userTime;
        }

        if (requestParameters.systemTime !== undefined) {
            queryParameters['system_time'] = requestParameters.systemTime;
        }

        if (requestParameters.minflts !== undefined) {
            queryParameters['minflts'] = requestParameters.minflts;
        }

        if (requestParameters.majflts !== undefined) {
            queryParameters['majflts'] = requestParameters.majflts;
        }

        if (requestParameters.nswaps !== undefined) {
            queryParameters['nswaps'] = requestParameters.nswaps;
        }

        if (requestParameters.reads !== undefined) {
            queryParameters['reads'] = requestParameters.reads;
        }

        if (requestParameters.readsBlks !== undefined) {
            queryParameters['reads_blks'] = requestParameters.readsBlks;
        }

        if (requestParameters.writes !== undefined) {
            queryParameters['writes'] = requestParameters.writes;
        }

        if (requestParameters.writesBlks !== undefined) {
            queryParameters['writes_blks'] = requestParameters.writesBlks;
        }

        if (requestParameters.msgsnds !== undefined) {
            queryParameters['msgsnds'] = requestParameters.msgsnds;
        }

        if (requestParameters.msgrcvs !== undefined) {
            queryParameters['msgrcvs'] = requestParameters.msgrcvs;
        }

        if (requestParameters.nsignals !== undefined) {
            queryParameters['nsignals'] = requestParameters.nsignals;
        }

        if (requestParameters.nvcsws !== undefined) {
            queryParameters['nvcsws'] = requestParameters.nvcsws;
        }

        if (requestParameters.nivcsws !== undefined) {
            queryParameters['nivcsws'] = requestParameters.nivcsws;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.range !== undefined && requestParameters.range !== null) {
            headerParameters['Range'] = String(requestParameters.range);
        }

        if (requestParameters.rangeUnit !== undefined && requestParameters.rangeUnit !== null) {
            headerParameters['Range-Unit'] = String(requestParameters.rangeUnit);
        }

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/pg_stat_kcache_detail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PgStatKcacheDetailFromJSON));
    }

    /**
     */
    async pgStatKcacheDetailGet(requestParameters: PgStatKcacheDetailGetRequest): Promise<Array<PgStatKcacheDetail>> {
        const response = await this.pgStatKcacheDetailGetRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum PgStatKcacheDetailGetPreferEnum {
    Countnone = 'count=none'
}
