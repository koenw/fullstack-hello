"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _flatten = _interopRequireDefault(require("lodash/flatten"));

var _ColumnGroup = _interopRequireDefault(require("../ColumnGroup"));

/**
 * Get the columns ReactElement array.
 * - Handling the case where there is an array of <Column> in children.
 * - Filter empty items in children.
 */
function getTableColumns(children) {
  if (!Array.isArray(children)) {
    return children;
  }

  var flattenColumns = (0, _flatten["default"])(children).map(function (column) {
    if ((column === null || column === void 0 ? void 0 : column.type) === _ColumnGroup["default"]) {
      var _column$props = column === null || column === void 0 ? void 0 : column.props,
          header = _column$props.header,
          childColumns = _column$props.children,
          align = _column$props.align,
          fixed = _column$props.fixed,
          verticalAlign = _column$props.verticalAlign,
          groupHeaderHeight = _column$props.groupHeaderHeight;

      return childColumns.map(function (childColumn, index) {
        // Overwrite the props set by ColumnGroup to Column.
        var groupCellProps = (0, _extends2["default"])({}, childColumn === null || childColumn === void 0 ? void 0 : childColumn.props, {
          groupHeaderHeight: groupHeaderHeight,
          align: align,
          fixed: fixed,
          verticalAlign: verticalAlign
        });
        /**
         * Set attributes for the first column in the group:
         * @field groupCount: The number of grouping sub-items.
         * @field groupHeader: Group header title.
         * @field resizable: Set to not resizable.
         */

        if (index === 0) {
          groupCellProps.groupCount = childColumns.length;
          groupCellProps.groupHeader = header;
          groupCellProps.resizable = false;
        }

        return /*#__PURE__*/_react["default"].cloneElement(childColumn, groupCellProps);
      });
    }

    return column;
  }); // Flatten the array in Columns into a one-dimensional array, and calculate lastColumn and firstColumn.

  return (0, _flatten["default"])(flattenColumns).filter(function (col) {
    return col;
  });
}

var _default = getTableColumns;
exports["default"] = _default;