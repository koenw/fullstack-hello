NAME := "fullstack-hello"

set dotenv-load := true
set export

# Open a psql shell into the development database
psql:
    PGPASSWORD="$DB_PASSWORD" psql -h "${DB_HOST}" -U "${DB_NAME}" -p "$DB_PORT"

# Initialize local development database roles
initdb:
  #!/bin/sh
  export PGPASSWORD="$DB_PASSWORD"
  export PGHOST="$DB_HOST"
  export PGUSER="$DB_USER"
  export PGPORT=$DB_PORT""
  export PGDATABASE="$DB_NAME"

  # This role will be used by postgrest to execute the queries
  psql -c "create role anon nologin"
  psql -c "grant anon to \"$DB_USER\""

# Import the given dataset
import dataset: initdb
  #!/bin/sh
  export PGPASSWORD="$DB_PASSWORD"
  export PGHOST="$DB_HOST"
  export PGUSER="$DB_USER"
  export PGPORT="$DB_PORT"
  export PGDATABASE="$DB_NAME"

  for f in datasets/{{ dataset }}/*.sql; do
    psql -f "$f"
  done

# Generate (or update) the typescript api client based on the backend's openapi
# spec
generate-client backend_url:
  #!/bin/sh
  set -euo pipefail
  #
  # We will use [openapi-generator](https://openapi-generator.tech/) to
  # generate the javascript client from the openapi spec that we download from
  # the PostgREST backend.
  #
  curl "{{backend_url}}" -o frontend/openapi.json
  rm -rf frontend/src/generated
  openapi-generator-cli generate -i frontend/openapi.json -g typescript-fetch -o frontend/src/generated

# Build the frontend docker image
build-frontend-image:
  cd frontend && npx parcel build src/index.html
  cd frontend && docker build -t koenw/{{NAME}}-frontend:latest .
  docker tag koenw/{{NAME}}-frontend:latest ghcr.io/koenw/{{NAME}}-frontend:latest

# Push the latest frontend image to the registry
push-frontend-image:
  docker push ghcr.io/koenw/{{NAME}}-frontend:latest

# Build the management docker image (to take care of db migrations)
build-mgmt-image:
  #!/bin/sh
  nix-build mgmt/default.nix
  docker load < result
  docker tag koenw/{{NAME}}-mgmt:latest ghcr.io/koenw/{{NAME}}-mgmt:latest

# Push the latest mgmt image to the registry
push-mgmt-image:
  docker push ghcr.io/koenw/{{NAME}}-mgmt:latest

# Generate default development .env file
dotenv:
  #!/bin/sh
  dotenv_path={{ invocation_directory() + "/.env" }}
  test -f "${dotenv_path}" && exit
  cat <<EOF > "${dotenv_path}"
    # psql (scripts)
    NAME={{NAME}}
    DB_HOST=localhost
    DB_PORT=5432
    DB_NAME={{NAME}}
    DB_USER={{NAME}}
    DB_PASSWORD={{NAME}}

    # Postgres Server
    POSTGRES_USER={{NAME}}
    POSTGRES_PASSWORD={{NAME}}
    POSTGRES_DB={{NAME}}

    # backend (PostgREST)
    #PGRST_DB_URI=postgres://<username>:<password>@<host>/<database>
    PGRST_DB_URI=postgres://{{NAME}}:{{NAME}}@postgres/{{NAME}}
    PGRST_DB_SCHEMA=public
    PGRST_DB_ANON_ROLE=anon
  EOF
